# 配置基于 https://github.com/Hackl0us/SS-Rule-Snippet 修改

# Clash 路由工作模式
# 规则模式：rule（规则） / global（全局代理）/ direct（全局直连）
mode: rule

# Clash 默认将日志输出至 STDOUT
# 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。
# 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。
log-level: info

# 改写与 MitM 相关（Beta）
http:
  # 强制使用 Stash Engine 以 HTTP 协议处理 TCP 连接
  # 捕获后的连接可以使用高级功能，例如重写和脚本
  force-http-engine:
    - "*:80"

  # 以 PKCS #12 编码的 CA 证书
  ca: ""
  # 证书密码
  ca-passphrase: ""
  # 开启 MitM 功能的域名列表，需要确保上述 CA 证书已受系统信任
  mitm:
    - g.cn
    - "*.google.cn"
    - api.m.jd.com
  # HTTP(S) 重写，支持header、302、307、reject多种策略
  rewrite:
    - ^https?:\/\/(www.)?(g|google)\.cn https://www.google.com 302
  # 使用 JavaScript 脚本改写 HTTP(S) 请求
  script:
    - match: ^https?://api\.m\.jd\.com/client\.action\?functionId=(wareBusiness|serverConfig|basicConfig)
      name: jd_historical_price # 引用script-providers中的脚本
      type: response # 脚本类型：request / response
      require-body: true # 如果需要 request / response body，请设置为 true
      timeout: 10 # script timeout in second (optional)

script-providers:
  jd_historical_price:
    # 远程资源模式
    url: https://raw.githubusercontent.com/yichahucha/surge/master/jd_price.js
    interval: 86400
  rewrite:
    # inline模式，仅推荐作为开发使用
    content: >
      $httpClient.get(
        {
          url: "https://httpbin.org/anything",
          headers: {
            "content-type": "application/json",
          },
          body: "{}",
        },
        function (error, response, body) {
          if (error) {
            console.log(error);
            $done();
            return;
          }
          console.log(response.status);
          console.log(JSON.stringify(response.headers));
          console.log(body);
          $done({ body });
        }
      );
script:
  shortcuts: # 使用 Python 脚本编写自定义规则
    # 4483 与 9305 为 BiliBili 的 QUIC CDN
    # quic: network == 'udp' and (dst_port == 443 or dst_port == 4483 or dst_port == 9305) # 可以在 rule 中引用

# DNS 服务器和建立连接时的 静态 Hosts, 仅在 dns.enhanced-mode 模式为 redir-host 生效
# 支持通配符域名 (例如: *.clash.dev, *.foo.*.example.com )
# 不使用通配符的域名优先级高于使用通配符的域名 (例如: foo.example.com > *.example.com > .example.com )
# 注意: +.foo.com 的效果等同于 .foo.com 和 foo.com
hosts:
  'localhost': 127.0.0.1
  '360.com': 127.0.0.1

# DNS 服务器配置(可选；若不配置，程序内置的 DNS 服务会被关闭)
dns:
  # 以下填写的 DNS 服务器将会被用来解析 DNS 服务的域名
  # 仅填写 DNS 服务器的 IP 地址
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
    - 114.114.114.114
    - system # 使用 iOS 系统 DNS
  # 支持 UDP / TCP / DoT / DoH 协议的 DNS 服务，可以指明具体的连接端口号。
  # 所有 DNS 请求将会直接发送到服务器，不经过任何代理。
  # Clash 会使用最先获得的解析记录回复 DNS 请求
  nameserver:
    # 不建议配置超过 2 个 DNS 服务器，会增加系统功耗
    - 223.5.5.5
    - 119.29.29.29
    - 1.1.1.1
    - 8.8.8.8
    - 114.114.114.114
    - https://cloudflare-dns.com/dns-query
    - https://dns.google/dns-query
    - system # 使用 iOS 系统 DNS

  # 对部分域名使用单独的 DNS 服务器
  nameserver-policy:
    "www.taobao.com": 223.5.5.5

  # 在以下列表的域名将不会被解析为 fake ip，这些域名相关的解析请求将会返回它们真实的 IP 地址
  fake-ip-filter:
    - "*.lan"
    - "*.localdomain"
    - "*.localhost"
    - "*.local"

proxies:
  # vmess
  # 支持加密方式：auto / aes-128-gcm / chacha20-poly1305 / none
  - name: "out-proxy-1"
    type: vmess
    server: xxx.xxx
    port: 1234
    uuid: uuid
    alterId: 0
    cipher: auto
    udp: false
    tls: true
    skip-cert-verify: false
    servername: xxx.xxx # 优先级高于 wss host
    network: ws
    ws-opts:
      path: /path
      max-early-data: 1024
      early-data-header-name: Sec-WebSocket-Protocol

  - name: "out-proxy-2"
    type: vless
    server: xxx.xxx
    port: 1234
    uuid: uuid
    network: ws
    tls: true
    skip-cert-verify: false
    ws-opts:
      path: /path
      headers:
        Host: xxx.xxx

proxy-groups:
  # 代理的转发链, 在 proxies 中不应该包含 relay. 不支持 UDP.
  # 流量: clash <-> out-proxy-1 <-> out-proxy-2 <-> 互联网
  - name: "relay"
    type: relay
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Direct.png
    proxies:
      - out-proxy-1
      - out-proxy-2

  # url-test 可以自动选择与指定 URL 测速后，延迟最短的服务器
  - name: "auto"
    type: url-test
    proxies:
      - out-proxy-1
      - out-proxy-2
    url: "http://www.gstatic.com/generate_204"
    interval: 300

  # fallback 可以尽量按照用户书写的服务器顺序，在确保服务器可用的情况下，自动选择服务器
  - name: "fallback-auto"
    type: fallback
    proxies:
      - out-proxy-1
      - out-proxy-2
    url: "http://www.gstatic.com/generate_204"
    interval: 300

  # load-balance 可以使相同 eTLD 请求在同一条代理线路上
  - name: "load-balance"
    type: load-balance
    proxies:
      - out-proxy-1
      - out-proxy-2
    url: "http://www.gstatic.com/generate_204"
    interval: 300

  # select 用来允许用户手动选择 代理服务器 或 服务器组
  # 您也可以使用 RESTful API 去切换服务器，这种方式推荐在 GUI 中使用
  - name: out-proxy
    type: select
    proxies:
      - out-proxy-1
      - out-proxy-2

  # 基于 SSID 的策略，方便在特殊网络环境下使用特定的代理
  - name: ssid-group
    type: select # 类型必须为 select，兼容原版 clash 配置
    proxies:
      - auto
      - DIRECT
    ssid-policy:
      # 在 SSID 为 ssid-1 的 Wi-Fi 中自动切换为 auto 策略
      # 其他的 SSID 以及蜂窝数据，默认为 DIRECT
      ssid-1: auto
      default: DIRECT

  # - name: UseProvider
  #   type: select
  #   use:
  #     - provider1
  #   proxies:
  #     - auto
  #     - DIRECT

# proxy-providers:
#   provider1:
#     url: https://raw.githubusercontent.com/STASH-NETWORKS-LIMITED/stash-example/main/config.yaml
#     interval: 3600
#     health-check:
#       enable: true
#       interval: 600
#       url: http://www.gstatic.com/generate_204

rule-providers:
  lan-cidr:
    behavior: ipcidr
    url: https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt
    interval: 86400

  ChinaMax_Domain:
    behavior: domain-text # 推荐使用 text 格式
    url: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/ChinaMax/ChinaMax_Domain.list
    interval: 86400

  china_ip_list:
    behavior: ipcidr-text
    url: https://cdn.jsdelivr.net/gh/17mon/china_ip_list@master/china_ip_list.txt
    interval: 86400

rules:
  # - SCRIPT,quic,REJECT
  - RULE-SET,lan-cidr,DIRECT
  - RULE-SET,ChinaMax_Domain,DIRECT
  - RULE-SET,china_ip_list,DIRECT
  - GEOIP,CN,DIRECT
  - MATCH,auto
