{
    "$schema": "https://github.com/EHfive/v2ray-jsonschema/raw/main/v5-config.schema.json",
    "inbounds": [
        {
            "protocol": "dokodemo-door", //Dokodemo door（任意门）是一个入站数据协议，它可以监听一个本地端口，并把所有进入此端口的数据发送至指定服务器的一个端口，从而达到端口映射的效果
            "settings": {
                "networks": [
                    "TCP",
                    "UDP"
                ], //可接收的网络协议类型。比如当指定为 "tcp" 时，任意门仅会接收 TCP 流量
                "followRedirect": true //当值为 true 时，Dokodemo door 会识别出由 iptables 转发而来的数据，并转发到相应的目标地址
            },
            "port": "1081", //可以是一个数值类型的字符串，如 "1234"；或者一个数值范围，如 "5-10" 表示端口 5 到端口 10
            "listen": "0.0.0.0", //监听地址，只允许 IP 地址，默认值为 "0.0.0.0"，表示接收所有网卡上的连接
            "tag": "transparent",
            "sniffing": { //入站连接的流量探测设置
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls",
                    "fakedns+others"
                ], // ["http" | "tls" | "quic" | "fakedns" | "fakedns+others"]  
                //dns 解析后会获取到目标地址的 ip，当基于 ip 的流量进入此 inbound 后 v2ray 会尝试通过以上配置的协议类型嗅探出此ip的原始域名信息并进入 router 进一步匹配规则
                //fakedns+others 选项会优先进行 FakeDNS 虚拟 DNS 服务器匹配。如果 IP 地址处于虚拟 DNS 服务器的 IP 地址区间内，但是没有找到相应的域名记录时，使用 http、tls 的匹配结果。此选项仅在 metadataOnly 为 false 时有效
                "metadataOnly": false //是否仅使用元数据推断目标地址而不截取流量内容。只有元数据流量目标侦测模块会被激活
            },
            "streamSettings": { // 底层传输配置
                "socketSettings": {
                    "tproxy": "tproxy" //"redirect" | "tproxy" | "off" 是否开启透明代理（仅适用于 Linux）
                }
            }
        },
        {
            "protocol": "socks",
            "settings": {
                "address": "", //通过配置此项使 V2Ray 固定回复你配置的地址。如果你不知道此项的作用，留空即可
                "udpEnabled": false, //是否开启 UDP 协议的支持。默认值为 false
                "packetEncoding": "None" //UDP 包编码方式，默认值为 None。 当该值为 None 时，UDP 将根据目标地址被映射 (Address and Port-Dependent Mapping)。 当该值为 Packet 时，UDP 将被端点独立映射 (Endpoint Independent Mapping)，此 UDP 行为也被称为 FullCone 或 NAT1
            },
            "port": "1080", //可以是一个数值类型的字符串，如 "1234"；或者一个数值范围，如 "5-10" 表示端口 5 到端口 10
            "listen": "0.0.0.0", //监听地址，只允许 IP 地址，默认值为 "0.0.0.0"，表示接收所有网卡上的连接
            "tag": "socks-inbound",
            "sniffing": { //入站连接的流量探测设置
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls",
                    "fakedns+others"
                ], // ["http" | "tls" | "quic" | "fakedns" | "fakedns+others"]  
                //dns 解析后会获取到目标地址的 ip，当基于 ip 的流量进入此 inbound 后 v2ray 会尝试通过以上配置的协议类型嗅探出此ip的原始域名信息并进入 router 进一步匹配规则
                //fakedns+others 选项会优先进行 FakeDNS 虚拟 DNS 服务器匹配。如果 IP 地址处于虚拟 DNS 服务器的 IP 地址区间内，但是没有找到相应的域名记录时，使用 http、tls 的匹配结果。此选项仅在 metadataOnly 为 false 时有效
                "metadataOnly": false //是否仅使用元数据推断目标地址而不截取流量内容。只有元数据流量目标侦测模块会被激活
            },
            "streamSettings": { // 底层传输配置
                "transport": "tcp",
                "transportSettings": {
                    "acceptProxyProtocol": false //仅用于入站，是否接收 Proxy Protocol，默认值为 false。该值为 true 时，底层 TCP 连接建立后，请求方必须先发送 Proxy Protocol，否则连接将被关闭
                },
                "security": "none",
                "socketSettings": {
                    "tcpFastOpen": true, // 是否启用 TCP Fast Open
                    "tcpFastOpenQueueLength": 4096, //入站连接的 TCP Fast Open 队列长度，默认值为 4096，仅在 Linux 中可用
                    "tproxy": "off", //"redirect" | "tproxy" | "off" 是否开启透明代理（仅适用于 Linux）
                    "tcpKeepAliveInterval": 600 // TCP 保持活跃的数据包的发送间隔，以秒为单位（仅适用于 Linux）
                    //"bindToDevice": "" // 将连接绑定到指定的网络设备
                }
            }
        },
        {
            "protocol": "http",
            "port": "1082", //可以是一个数值类型的字符串，如 "1234"；或者一个数值范围，如 "5-10" 表示端口 5 到端口 10
            "listen": "0.0.0.0", //监听地址，只允许 IP 地址，默认值为 "0.0.0.0"，表示接收所有网卡上的连接
            "tag": "http-inbound",
            "sniffing": { //入站连接的流量探测设置
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls",
                    "fakedns+others"
                ], // ["http" | "tls" | "quic" | "fakedns" | "fakedns+others"]  
                //dns 解析后会获取到目标地址的 ip，当基于 ip 的流量进入此 inbound 后 v2ray 会尝试通过以上配置的协议类型嗅探出此ip的原始域名信息并进入 router 进一步匹配规则
                //fakedns+others 选项会优先进行 FakeDNS 虚拟 DNS 服务器匹配。如果 IP 地址处于虚拟 DNS 服务器的 IP 地址区间内，但是没有找到相应的域名记录时，使用 http、tls 的匹配结果。此选项仅在 metadataOnly 为 false 时有效
                "metadataOnly": false //是否仅使用元数据推断目标地址而不截取流量内容。只有元数据流量目标侦测模块会被激活
            },
            "streamSettings": { // 底层传输配置
                "transport": "tcp",
                "transportSettings": {
                    "acceptProxyProtocol": false //仅用于入站，是否接收 Proxy Protocol，默认值为 false。该值为 true 时，底层 TCP 连接建立后，请求方必须先发送 Proxy Protocol，否则连接将被关闭
                },
                "security": "none",
                "socketSettings": {
                    "tcpFastOpen": true, // 是否启用 TCP Fast Open
                    "tcpFastOpenQueueLength": 4096, //入站连接的 TCP Fast Open 队列长度，默认值为 4096，仅在 Linux 中可用
                    "tproxy": "off", //"redirect" | "tproxy" | "off" 是否开启透明代理（仅适用于 Linux）
                    "tcpKeepAliveInterval": 600 // TCP 保持活跃的数据包的发送间隔，以秒为单位（仅适用于 Linux）
                }
            }
        }
    ]
}