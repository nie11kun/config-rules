{
    "$schema": "https://github.com/EHfive/v2ray-jsonschema/raw/main/v5-config.schema.json",
    "outbounds": [
        {
            "protocol": "vmess",
            "settings": {
                "address": "your.domain", //服务器地址，支持 IP 地址或者域名。
                "port": 443, //服务器端口号。
                "uuid": "uuid-here" //服务器认可的 VMess 用户 ID，必须为合法的 UUID
            },
            "sendThrough": "0.0.0.0", //用于发送数据的 IP 地址，当主机有多个 IP 地址时有效，默认值为 "0.0.0.0"
            "tag": "out-vmess",
            "streamSettings": {
                "transport": "ws",
                "transportSettings": {
                    "path": "/proxypath", //WebSocket 所使用的 HTTP 协议路径，默认值为 "/"。
                    "header": [
                        {
                            "key": "Host",  // 指定 host 时下面的 serverName 必须定义
                            "value": "niekun.net"
                        }
                    ], //自定义 HTTP 头，一个键值对，每个键表示一个 HTTP 头的名称，对应的值是字符串。默认值为空。
                    "maxEarlyData": 2048, //发送的前置数据的最长长度。用于减少连接建立的时间  设置过小可能导致无法连接服务器
                    "useBrowserForwarding": false //是否启用浏览器转发
                    //"earlyDataHeaderName": ""//送的前置数据的 HTTP 头的名字，设置后启用基于 HTTP 头的前置数据。如果留空则使用基于路径的前置数据
                },
                "security": "tls",
                "securitySettings": {
                    "serverName": "you.domain",//当目标连接由域名指定时，比如在 Socks 入站时接收到了域名，或者由 Sniffing 功能探测出了域名，这个域名会自动用于 serverName，无须手动配置，当 address 是 IP 地址 且定义了 header 的 host 时，serverName 必须定义
                    //"nextProtocol": ["h2","http/1.1"], //一个字符串数组，指定了 TLS 握手时指定的 ALPN 数值。使用 h2 需要服务端支持 http2
                    "disableSystemRoot": false, //是否禁用操作系统自带的 CA 证书。默认值为 false。当值为 true 时，V2Ray 只会使用 certificates 中指定的证书进行 TLS 握手。当值为 false 时，V2Ray 只会使用操作系统自带的 CA 证书进行 TLS 握手
                    "minVersion": "TLS1_1", // 最小 tls version
                    "maxVersion": "TLS1_3" // 最大 tls version
                },
                "socketSettings": {
                    // "mark": 255, //当其值非零时，在出站连接上标记 SO_MARK  仅适用于 Linux 系统  需要 CAP_NET_ADMIN 权限
                    "tcpFastOpen": true // 是否启用 TCP Fast Open 可用于入站出站连接
                }
            },
            //"proxySettings": {
            //    "tag": "another-outbound-tag",//当指定另一个出站连接的标识时，此出站连接发出的数据，将被转发至所指定的出站连接发出。
            //    "transportLayer": false //是否启用传输层转发支持。在启用后,此出站连接的传输层协议将保持生效 如果不启用此选项, 在转发时传输层协议将失效，只能使用默认的 TCP 传输协议
            //},
            "mux": { //Mux 功能实现了在一条 TCP 连接上分发多条 TCP 连接的数据
                "enabled": true, //是否启用 Mux，默认值为 false
                "concurrency": 8 //大并发连接数。最小值 1，最大值 1024，默认值 8 如果填负数，如 -1，则不加载 Mux 模块
            },
            "domainStrategy": "UseIP4"
            //"AsIs" : 让操作系统来解析。
            //"UseIP" : 使用内置 dns 解析它，并使用结果中的任意 IP 地址。
            //"UseIP4" : 使用内置 dns 解析它，并使用结果中的任意 IPv4 地址。
            //"UseIP6" : 使用内置 dns 解析它，并使用结果中的任意 IPv6 地址。
        },
        {
            "protocol": "vless",
            "settings": {
                "address": "your.domain",
                "port": 443,
                "uuid": "uuid-here"
            },
            "sendThrough": "0.0.0.0",
            "tag": "out-vless",
            "streamSettings": {
                "transport": "ws",
                "transportSettings": {
                    "path": "/proxypath",
                    // "header": [
                    //     {
                    //         "key": "key1",
                    //         "value": "abc"
                    //     }
                    // ],
                    // "maxEarlyData": 2048,
                    "useBrowserForwarding": false
                    //"earlyDataHeaderName": ""
                },
                "security": "tls",
                "securitySettings": {
                    "serverName": "you.domain",
                    "disableSystemRoot": false,
                    "minVersion": "TLS1_1",
                    "maxVersion": "TLS1_3"
                },
                "socketSettings": {
                    "tcpFastOpen": false
                }
            },
            "mux": {
                "enabled": false,
                "concurrency": -1
            },
            "domainStrategy": "UseIP4"
        },
        {
            "protocol": "freedom",
            "tag": "direct-systemDNS",
            "domainStrategy": "AsIs",
            "socketSettings": {
                // "mark": 255
            }
        },
        {
            "protocol": "freedom",
            "tag": "direct-customDNS",
            "domainStrategy": "UseIP4",
            "socketSettings": {
                // "mark": 255
            }
        },
        {
            "protocol": "blackhole",
            "tag": "blocked",
            "socketSettings": {
                // "mark": 255
            }
        },
        {
            "protocol": "dns", //DNS 是一个出站协议，主要用于拦截和转发 DNS 查询。此出站协议只能接收 DNS 流量（包含基于 UDP 和 TCP 协议的查询），其它类型的流量会导致错误。在处理 DNS 查询时，此出站协议会将 IP 查询（即 A 和 AAAA）转发给内置的 DNS 服务器
            "tag": "dns-out",
            "socketSettings": {
                // "mark": 255
            }
        }
    ]
}